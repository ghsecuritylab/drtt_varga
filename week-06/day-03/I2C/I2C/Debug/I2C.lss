
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000008f0  00000984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080011c  0080011c  000009a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da1  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad2  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000653  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000029bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000579  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  0000309d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e0 ef       	ldi	r30, 0xF0	; 240
  80:	f8 e0       	ldi	r31, 0x08	; 8
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 31       	cpi	r26, 0x1C	; 28
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e1       	ldi	r26, 0x1C	; 28
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a3 34       	cpi	r26, 0x43	; 67
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  a2:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <system_init>:

void system_init()
{
	//TODO
	// Call the TWI driver init function
	TWI_init();
  aa:	0e 94 a6 00 	call	0x14c	; 0x14c <TWI_init>

	//TODO
	//Init the uart
	UART_init();
  ae:	0e 94 1c 01 	call	0x238	; 0x238 <UART_init>
  b2:	08 95       	ret

000000b4 <main>:
}

int main(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	6c 97       	sbiw	r28, 0x1c	; 28
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61

	// Don't forget to call the init function :)
	system_init();
  c8:	0e 94 55 00 	call	0xaa	; 0xaa <system_init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_send_character, NULL, _FDEV_SETUP_WRITE);
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	fd 01       	movw	r30, r26
  d4:	28 2f       	mov	r18, r24
  d6:	11 92       	st	Z+, r1
  d8:	2a 95       	dec	r18
  da:	e9 f7       	brne	.-6      	; 0xd6 <main+0x22>
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	2d e3       	ldi	r18, 0x3D	; 61
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	3a 87       	std	Y+10, r19	; 0x0a
  e6:	29 87       	std	Y+9, r18	; 0x09
	stdout = &UART_output;
  e8:	2d e3       	ldi	r18, 0x3D	; 61
  ea:	31 e0       	ldi	r19, 0x01	; 1
  ec:	f9 01       	movw	r30, r18
  ee:	b3 83       	std	Z+3, r27	; 0x03
  f0:	a2 83       	std	Z+2, r26	; 0x02
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_get_character, _FDEV_SETUP_READ);
  f2:	1e 96       	adiw	r26, 0x0e	; 14
  f4:	fd 01       	movw	r30, r26
  f6:	11 92       	st	Z+, r1
  f8:	8a 95       	dec	r24
  fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x42>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	8a 8b       	std	Y+18, r24	; 0x12
 100:	85 e4       	ldi	r24, 0x45	; 69
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	9a 8f       	std	Y+26, r25	; 0x1a
 106:	89 8f       	std	Y+25, r24	; 0x19
	stdin = &UART_input;
 108:	f9 01       	movw	r30, r18
 10a:	b1 83       	std	Z+1, r27	; 0x01
 10c:	a0 83       	st	Z, r26
	//----- END OF STDIO IO BUFFER SETUP

	// Try printf
	printf("Startup...\r\n");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 7e 01 	call	0x2fc	; 0x2fc <puts>

	sei();
 116:	78 94       	sei
	// Infinite loop
	while (1) {
		//TODO
		//Write the temperature frequently.
		_delay_ms(1000);
		printf("temp: %d [°C]\r\n", read_temp(TC_ADDRESS));
 118:	0c e0       	ldi	r16, 0x0C	; 12
 11a:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	ff ef       	ldi	r31, 0xFF	; 255
 11e:	23 ed       	ldi	r18, 0xD3	; 211
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	f1 50       	subi	r31, 0x01	; 1
 124:	20 40       	sbci	r18, 0x00	; 0
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x6e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x78>
 12c:	00 00       	nop
 12e:	88 e4       	ldi	r24, 0x48	; 72
 130:	0e 94 cf 00 	call	0x19e	; 0x19e <read_temp>
 134:	1f 92       	push	r1
 136:	8f 93       	push	r24
 138:	1f 93       	push	r17
 13a:	0f 93       	push	r16
 13c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <printf>
		//TODO
		//Advanced: Don't use delay, use timer.

		//TODO
		//Blink the led to make sure the code is running
		PINB |= 1 << LED_PORT_POS;
 140:	1d 9a       	sbi	0x03, 5	; 3
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	e8 cf       	rjmp	.-48     	; 0x11c <main+0x68>

0000014c <TWI_init>:
	//the DATA has been transmitted, and ACK/
	//NACK has been received.
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
	while ((TWCR & (1 << TWINT)) == 0);
	return TWDR;
}
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 15e:	08 95       	ret

00000160 <TWI_start>:
 160:	84 ea       	ldi	r24, 0xA4	; 164
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 166:	ec eb       	ldi	r30, 0xBC	; 188
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <TWI_start+0xa>
 170:	08 95       	ret

00000172 <TWI_read_nack>:
	//TODO
	//Read byte with NACK
	//Wait for TWINT Flag set. This indicates that
	//the DATA has been transmitted, and ACK/
	//NACK has been received.
	TWCR = (1 << TWINT) | (1 << TWEN);
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while ((TWCR & (1 << TWINT)) == 0);
 178:	ec eb       	ldi	r30, 0xBC	; 188
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <TWI_read_nack+0xa>
	return TWDR;
 182:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 186:	08 95       	ret

00000188 <TWI_write>:
	//Load DATA into TWDR Register. Clear TWINT
	//bit in TWCR to start transmission of data.
	//Wait for TWINT Flag set. This indicates that
	//the DATA has been transmitted, and ACK/
	//NACK has been received.
	TWDR = u8data;
 188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
 18c:	84 e8       	ldi	r24, 0x84	; 132
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while ((TWCR & (1 << TWINT)) == 0);
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <TWI_write+0xe>
}
 19c:	08 95       	ret

0000019e <read_temp>:
//Write a function that communicates with the TC74A0.
//datasheet: http://ww1.microchip.com/downloads/en/DeviceDoc/21462D.pdf
//And returns with the temperature.

uint8_t read_temp (uint8_t address)
{
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24

	TWI_start();
 1a2:	0e 94 b0 00 	call	0x160	; 0x160 <TWI_start>
	TWI_write(address << TWA0 | TC_WRITE << TWGCE);
 1a6:	8c 2f       	mov	r24, r28
 1a8:	88 0f       	add	r24, r24
 1aa:	0e 94 c4 00 	call	0x188	; 0x188 <TWI_write>
	TWI_write(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 c4 00 	call	0x188	; 0x188 <TWI_write>
	TWI_start();
 1b4:	0e 94 b0 00 	call	0x160	; 0x160 <TWI_start>
	TWI_write(address << TWA0 | TC_READ << TWGCE);
 1b8:	8c 2f       	mov	r24, r28
 1ba:	88 0f       	add	r24, r24
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	0e 94 c4 00 	call	0x188	; 0x188 <TWI_write>
	uint8_t ii = TWI_read_nack();
 1c2:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_read_nack>

void TWI_stop(void)
{
	//TODO
	//Send stop signal
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 1c6:	94 e9       	ldi	r25, 0x94	; 148
 1c8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWI_write(address << TWA0 | TC_READ << TWGCE);
	uint8_t ii = TWI_read_nack();
	TWI_stop();

	return ii;
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <__vector_18>:
#include <avr/io.h>
#include <stdint.h>
#include <avr/interrupt.h>

ISR(USART_RX_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	// Put received character into the circular buffer
	*(rx_buffer.write_ptr) = UDR0;
 1ea:	ec e1       	ldi	r30, 0x1C	; 28
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	a5 8d       	ldd	r26, Z+29	; 0x1d
 1f0:	b6 8d       	ldd	r27, Z+30	; 0x1e
 1f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1f6:	8c 93       	st	X, r24

	// Increment the write ptr
	// Be aware that the write ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if (rx_buffer.write_ptr == rx_buffer.tail)
 1f8:	25 8d       	ldd	r18, Z+29	; 0x1d
 1fa:	36 8d       	ldd	r19, Z+30	; 0x1e
 1fc:	83 8d       	ldd	r24, Z+27	; 0x1b
 1fe:	94 8d       	ldd	r25, Z+28	; 0x1c
 200:	28 17       	cp	r18, r24
 202:	39 07       	cpc	r19, r25
 204:	29 f4       	brne	.+10     	; 0x210 <__vector_18+0x40>
	rx_buffer.write_ptr = rx_buffer.head;
 206:	81 8d       	ldd	r24, Z+25	; 0x19
 208:	92 8d       	ldd	r25, Z+26	; 0x1a
 20a:	96 8f       	std	Z+30, r25	; 0x1e
 20c:	85 8f       	std	Z+29, r24	; 0x1d
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__vector_18+0x4e>
	else
	rx_buffer.write_ptr++;
 210:	ec e1       	ldi	r30, 0x1C	; 28
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	85 8d       	ldd	r24, Z+29	; 0x1d
 216:	96 8d       	ldd	r25, Z+30	; 0x1e
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	96 8f       	std	Z+30, r25	; 0x1e
 21c:	85 8f       	std	Z+29, r24	; 0x1d

}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <UART_init>:
	// See the datasheet on page 246 for hints and table 25-9.

	// At first set the baud rate to 115200
	// The CPU clock frequency is 16MHz
	uint16_t ubbr = 8;
	UBRR0H = ubbr >> 8;
 238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubbr;
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Set the following frame format: 8N1
	// It's set by default to 8N1

	// Enable TX
	UCSR0B |= 1 << TXEN0;
 242:	e1 ec       	ldi	r30, 0xC1	; 193
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24

	// Enable RX
	UCSR0B |= 1 << RXEN0;
 24c:	80 81       	ld	r24, Z
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 83       	st	Z, r24

	// Enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
 252:	80 81       	ld	r24, Z
 254:	80 68       	ori	r24, 0x80	; 128
 256:	80 83       	st	Z, r24

	// Initialize circular buffer pointers, they should point to the head of the buffer
	rx_buffer.head = &(rx_buffer.buffer[0]);
 258:	ec e1       	ldi	r30, 0x1C	; 28
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	f2 8f       	std	Z+26, r31	; 0x1a
 25e:	e1 8f       	std	Z+25, r30	; 0x19
	rx_buffer.tail = &(rx_buffer.buffer[RX_CIRC_BUFF_LEN - 1]);
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	94 8f       	std	Z+28, r25	; 0x1c
 266:	83 8f       	std	Z+27, r24	; 0x1b
	rx_buffer.read_ptr = rx_buffer.head;
 268:	81 8d       	ldd	r24, Z+25	; 0x19
 26a:	92 8d       	ldd	r25, Z+26	; 0x1a
 26c:	90 a3       	std	Z+32, r25	; 0x20
 26e:	87 8f       	std	Z+31, r24	; 0x1f
	rx_buffer.write_ptr = rx_buffer.head;
 270:	81 8d       	ldd	r24, Z+25	; 0x19
 272:	92 8d       	ldd	r25, Z+26	; 0x1a
 274:	96 8f       	std	Z+30, r25	; 0x1e
 276:	85 8f       	std	Z+29, r24	; 0x1d
 278:	08 95       	ret

0000027a <UART_send_character>:
{
	// This function can send a character through UART with polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	// Wait for empty USART buffer register
	while ( !( UCSR0A & (1 << UDRE0)) );
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	90 81       	ld	r25, Z
 280:	95 ff       	sbrs	r25, 5
 282:	fd cf       	rjmp	.-6      	; 0x27e <UART_send_character+0x4>

	// Put data to USART buffer register
	UDR0 = character;
 284:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 288:	08 95       	ret

0000028a <UART_get_character>:
}

char UART_get_character()
{
	// Wait for data in the circular buffer, this can be detected if the write and read pointers are pointing to the same memory block
	while ((rx_buffer.read_ptr) == (rx_buffer.write_ptr));
 28a:	ec e1       	ldi	r30, 0x1C	; 28
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	27 8d       	ldd	r18, Z+31	; 0x1f
 290:	30 a1       	ldd	r19, Z+32	; 0x20
 292:	85 8d       	ldd	r24, Z+29	; 0x1d
 294:	96 8d       	ldd	r25, Z+30	; 0x1e
 296:	28 17       	cp	r18, r24
 298:	39 07       	cpc	r19, r25
 29a:	c9 f3       	breq	.-14     	; 0x28e <UART_get_character+0x4>

	// Save the data to a temporary variable
	char to_return = *(rx_buffer.read_ptr);
 29c:	ec e1       	ldi	r30, 0x1C	; 28
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	a7 8d       	ldd	r26, Z+31	; 0x1f
 2a2:	b0 a1       	ldd	r27, Z+32	; 0x20
 2a4:	8c 91       	ld	r24, X

	// Increment the read ptr
	// Be aware that the read ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if (rx_buffer.read_ptr == rx_buffer.tail)
 2a6:	47 8d       	ldd	r20, Z+31	; 0x1f
 2a8:	50 a1       	ldd	r21, Z+32	; 0x20
 2aa:	23 8d       	ldd	r18, Z+27	; 0x1b
 2ac:	34 8d       	ldd	r19, Z+28	; 0x1c
 2ae:	42 17       	cp	r20, r18
 2b0:	53 07       	cpc	r21, r19
 2b2:	29 f4       	brne	.+10     	; 0x2be <UART_get_character+0x34>
	rx_buffer.read_ptr = rx_buffer.head;
 2b4:	21 8d       	ldd	r18, Z+25	; 0x19
 2b6:	32 8d       	ldd	r19, Z+26	; 0x1a
 2b8:	30 a3       	std	Z+32, r19	; 0x20
 2ba:	27 8f       	std	Z+31, r18	; 0x1f
 2bc:	08 95       	ret
	else
	rx_buffer.read_ptr++;
 2be:	ec e1       	ldi	r30, 0x1C	; 28
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	27 8d       	ldd	r18, Z+31	; 0x1f
 2c4:	30 a1       	ldd	r19, Z+32	; 0x20
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	30 a3       	std	Z+32, r19	; 0x20
 2cc:	27 8f       	std	Z+31, r18	; 0x1f


	// Return the read character
	return to_return;
}
 2ce:	08 95       	ret

000002d0 <printf>:
 2d0:	a0 e0       	ldi	r26, 0x00	; 0
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	ee e6       	ldi	r30, 0x6E	; 110
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__prologue_saves__+0x20>
 2dc:	ae 01       	movw	r20, r28
 2de:	4b 5f       	subi	r20, 0xFB	; 251
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	fa 01       	movw	r30, r20
 2e4:	61 91       	ld	r22, Z+
 2e6:	71 91       	ld	r23, Z+
 2e8:	af 01       	movw	r20, r30
 2ea:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <__iob+0x2>
 2ee:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__iob+0x3>
 2f2:	0e 94 ae 01 	call	0x35c	; 0x35c <vfprintf>
 2f6:	e2 e0       	ldi	r30, 0x02	; 2
 2f8:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__epilogue_restores__+0x20>

000002fc <puts>:
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <__iob+0x2>
 308:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <__iob+0x3>
 30c:	23 81       	ldd	r18, Z+3	; 0x03
 30e:	21 ff       	sbrs	r18, 1
 310:	1b c0       	rjmp	.+54     	; 0x348 <puts+0x4c>
 312:	8c 01       	movw	r16, r24
 314:	d0 e0       	ldi	r29, 0x00	; 0
 316:	c0 e0       	ldi	r28, 0x00	; 0
 318:	f8 01       	movw	r30, r16
 31a:	81 91       	ld	r24, Z+
 31c:	8f 01       	movw	r16, r30
 31e:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <__iob+0x2>
 322:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <__iob+0x3>
 326:	db 01       	movw	r26, r22
 328:	18 96       	adiw	r26, 0x08	; 8
 32a:	ed 91       	ld	r30, X+
 32c:	fc 91       	ld	r31, X
 32e:	19 97       	sbiw	r26, 0x09	; 9
 330:	88 23       	and	r24, r24
 332:	31 f0       	breq	.+12     	; 0x340 <puts+0x44>
 334:	09 95       	icall
 336:	89 2b       	or	r24, r25
 338:	79 f3       	breq	.-34     	; 0x318 <puts+0x1c>
 33a:	df ef       	ldi	r29, 0xFF	; 255
 33c:	cf ef       	ldi	r28, 0xFF	; 255
 33e:	ec cf       	rjmp	.-40     	; 0x318 <puts+0x1c>
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	09 95       	icall
 344:	89 2b       	or	r24, r25
 346:	19 f0       	breq	.+6      	; 0x34e <puts+0x52>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	02 c0       	rjmp	.+4      	; 0x352 <puts+0x56>
 34e:	8d 2f       	mov	r24, r29
 350:	9c 2f       	mov	r25, r28
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <vfprintf>:
 35c:	ab e0       	ldi	r26, 0x0B	; 11
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e4 eb       	ldi	r30, 0xB4	; 180
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__prologue_saves__>
 368:	6c 01       	movw	r12, r24
 36a:	7b 01       	movw	r14, r22
 36c:	8a 01       	movw	r16, r20
 36e:	fc 01       	movw	r30, r24
 370:	17 82       	std	Z+7, r1	; 0x07
 372:	16 82       	std	Z+6, r1	; 0x06
 374:	83 81       	ldd	r24, Z+3	; 0x03
 376:	81 ff       	sbrs	r24, 1
 378:	cc c1       	rjmp	.+920    	; 0x712 <__stack+0x213>
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	3c 01       	movw	r6, r24
 380:	f6 01       	movw	r30, r12
 382:	93 81       	ldd	r25, Z+3	; 0x03
 384:	f7 01       	movw	r30, r14
 386:	93 fd       	sbrc	r25, 3
 388:	85 91       	lpm	r24, Z+
 38a:	93 ff       	sbrs	r25, 3
 38c:	81 91       	ld	r24, Z+
 38e:	7f 01       	movw	r14, r30
 390:	88 23       	and	r24, r24
 392:	09 f4       	brne	.+2      	; 0x396 <vfprintf+0x3a>
 394:	ba c1       	rjmp	.+884    	; 0x70a <__stack+0x20b>
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	39 f4       	brne	.+14     	; 0x3a8 <vfprintf+0x4c>
 39a:	93 fd       	sbrc	r25, 3
 39c:	85 91       	lpm	r24, Z+
 39e:	93 ff       	sbrs	r25, 3
 3a0:	81 91       	ld	r24, Z+
 3a2:	7f 01       	movw	r14, r30
 3a4:	85 32       	cpi	r24, 0x25	; 37
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <vfprintf+0x56>
 3a8:	b6 01       	movw	r22, r12
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 3b0:	e7 cf       	rjmp	.-50     	; 0x380 <vfprintf+0x24>
 3b2:	91 2c       	mov	r9, r1
 3b4:	21 2c       	mov	r2, r1
 3b6:	31 2c       	mov	r3, r1
 3b8:	ff e1       	ldi	r31, 0x1F	; 31
 3ba:	f3 15       	cp	r31, r3
 3bc:	d8 f0       	brcs	.+54     	; 0x3f4 <vfprintf+0x98>
 3be:	8b 32       	cpi	r24, 0x2B	; 43
 3c0:	79 f0       	breq	.+30     	; 0x3e0 <vfprintf+0x84>
 3c2:	38 f4       	brcc	.+14     	; 0x3d2 <vfprintf+0x76>
 3c4:	80 32       	cpi	r24, 0x20	; 32
 3c6:	79 f0       	breq	.+30     	; 0x3e6 <vfprintf+0x8a>
 3c8:	83 32       	cpi	r24, 0x23	; 35
 3ca:	a1 f4       	brne	.+40     	; 0x3f4 <vfprintf+0x98>
 3cc:	23 2d       	mov	r18, r3
 3ce:	20 61       	ori	r18, 0x10	; 16
 3d0:	1d c0       	rjmp	.+58     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d2:	8d 32       	cpi	r24, 0x2D	; 45
 3d4:	61 f0       	breq	.+24     	; 0x3ee <vfprintf+0x92>
 3d6:	80 33       	cpi	r24, 0x30	; 48
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <vfprintf+0x98>
 3da:	23 2d       	mov	r18, r3
 3dc:	21 60       	ori	r18, 0x01	; 1
 3de:	16 c0       	rjmp	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e0:	83 2d       	mov	r24, r3
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	38 2e       	mov	r3, r24
 3e6:	e3 2d       	mov	r30, r3
 3e8:	e4 60       	ori	r30, 0x04	; 4
 3ea:	3e 2e       	mov	r3, r30
 3ec:	2a c0       	rjmp	.+84     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3ee:	f3 2d       	mov	r31, r3
 3f0:	f8 60       	ori	r31, 0x08	; 8
 3f2:	1d c0       	rjmp	.+58     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f4:	37 fc       	sbrc	r3, 7
 3f6:	2d c0       	rjmp	.+90     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3f8:	20 ed       	ldi	r18, 0xD0	; 208
 3fa:	28 0f       	add	r18, r24
 3fc:	2a 30       	cpi	r18, 0x0A	; 10
 3fe:	40 f0       	brcs	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	8e 32       	cpi	r24, 0x2E	; 46
 402:	b9 f4       	brne	.+46     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 404:	36 fc       	sbrc	r3, 6
 406:	81 c1       	rjmp	.+770    	; 0x70a <__stack+0x20b>
 408:	23 2d       	mov	r18, r3
 40a:	20 64       	ori	r18, 0x40	; 64
 40c:	32 2e       	mov	r3, r18
 40e:	19 c0       	rjmp	.+50     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 410:	36 fe       	sbrs	r3, 6
 412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 414:	8a e0       	ldi	r24, 0x0A	; 10
 416:	98 9e       	mul	r9, r24
 418:	20 0d       	add	r18, r0
 41a:	11 24       	eor	r1, r1
 41c:	92 2e       	mov	r9, r18
 41e:	11 c0       	rjmp	.+34     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 420:	ea e0       	ldi	r30, 0x0A	; 10
 422:	2e 9e       	mul	r2, r30
 424:	20 0d       	add	r18, r0
 426:	11 24       	eor	r1, r1
 428:	22 2e       	mov	r2, r18
 42a:	f3 2d       	mov	r31, r3
 42c:	f0 62       	ori	r31, 0x20	; 32
 42e:	3f 2e       	mov	r3, r31
 430:	08 c0       	rjmp	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 432:	8c 36       	cpi	r24, 0x6C	; 108
 434:	21 f4       	brne	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 436:	83 2d       	mov	r24, r3
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	38 2e       	mov	r3, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	88 36       	cpi	r24, 0x68	; 104
 440:	41 f4       	brne	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 442:	f7 01       	movw	r30, r14
 444:	93 fd       	sbrc	r25, 3
 446:	85 91       	lpm	r24, Z+
 448:	93 ff       	sbrs	r25, 3
 44a:	81 91       	ld	r24, Z+
 44c:	7f 01       	movw	r14, r30
 44e:	81 11       	cpse	r24, r1
 450:	b3 cf       	rjmp	.-154    	; 0x3b8 <vfprintf+0x5c>
 452:	98 2f       	mov	r25, r24
 454:	9f 7d       	andi	r25, 0xDF	; 223
 456:	95 54       	subi	r25, 0x45	; 69
 458:	93 30       	cpi	r25, 0x03	; 3
 45a:	28 f4       	brcc	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45c:	0c 5f       	subi	r16, 0xFC	; 252
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
 460:	9f e3       	ldi	r25, 0x3F	; 63
 462:	99 83       	std	Y+1, r25	; 0x01
 464:	0d c0       	rjmp	.+26     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 466:	83 36       	cpi	r24, 0x63	; 99
 468:	31 f0       	breq	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 46a:	83 37       	cpi	r24, 0x73	; 115
 46c:	71 f0       	breq	.+28     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 46e:	83 35       	cpi	r24, 0x53	; 83
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	59 c0       	rjmp	.+178    	; 0x526 <__stack+0x27>
 474:	21 c0       	rjmp	.+66     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 476:	f8 01       	movw	r30, r16
 478:	80 81       	ld	r24, Z
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	0e 5f       	subi	r16, 0xFE	; 254
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	88 24       	eor	r8, r8
 482:	83 94       	inc	r8
 484:	91 2c       	mov	r9, r1
 486:	53 01       	movw	r10, r6
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 48a:	28 01       	movw	r4, r16
 48c:	f2 e0       	ldi	r31, 0x02	; 2
 48e:	4f 0e       	add	r4, r31
 490:	51 1c       	adc	r5, r1
 492:	f8 01       	movw	r30, r16
 494:	a0 80       	ld	r10, Z
 496:	b1 80       	ldd	r11, Z+1	; 0x01
 498:	36 fe       	sbrs	r3, 6
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	69 2d       	mov	r22, r9
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	6f ef       	ldi	r22, 0xFF	; 255
 4a4:	7f ef       	ldi	r23, 0xFF	; 255
 4a6:	c5 01       	movw	r24, r10
 4a8:	0e 94 9a 03 	call	0x734	; 0x734 <strnlen>
 4ac:	4c 01       	movw	r8, r24
 4ae:	82 01       	movw	r16, r4
 4b0:	f3 2d       	mov	r31, r3
 4b2:	ff 77       	andi	r31, 0x7F	; 127
 4b4:	3f 2e       	mov	r3, r31
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4b8:	28 01       	movw	r4, r16
 4ba:	22 e0       	ldi	r18, 0x02	; 2
 4bc:	42 0e       	add	r4, r18
 4be:	51 1c       	adc	r5, r1
 4c0:	f8 01       	movw	r30, r16
 4c2:	a0 80       	ld	r10, Z
 4c4:	b1 80       	ldd	r11, Z+1	; 0x01
 4c6:	36 fe       	sbrs	r3, 6
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	69 2d       	mov	r22, r9
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d0:	6f ef       	ldi	r22, 0xFF	; 255
 4d2:	7f ef       	ldi	r23, 0xFF	; 255
 4d4:	c5 01       	movw	r24, r10
 4d6:	0e 94 8f 03 	call	0x71e	; 0x71e <strnlen_P>
 4da:	4c 01       	movw	r8, r24
 4dc:	f3 2d       	mov	r31, r3
 4de:	f0 68       	ori	r31, 0x80	; 128
 4e0:	3f 2e       	mov	r3, r31
 4e2:	82 01       	movw	r16, r4
 4e4:	33 fc       	sbrc	r3, 3
 4e6:	1b c0       	rjmp	.+54     	; 0x51e <__stack+0x1f>
 4e8:	82 2d       	mov	r24, r2
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	88 16       	cp	r8, r24
 4ee:	99 06       	cpc	r9, r25
 4f0:	b0 f4       	brcc	.+44     	; 0x51e <__stack+0x1f>
 4f2:	b6 01       	movw	r22, r12
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 4fc:	2a 94       	dec	r2
 4fe:	f4 cf       	rjmp	.-24     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 500:	f5 01       	movw	r30, r10
 502:	37 fc       	sbrc	r3, 7
 504:	85 91       	lpm	r24, Z+
 506:	37 fe       	sbrs	r3, 7
 508:	81 91       	ld	r24, Z+
 50a:	5f 01       	movw	r10, r30
 50c:	b6 01       	movw	r22, r12
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 514:	21 10       	cpse	r2, r1
 516:	2a 94       	dec	r2
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	82 1a       	sub	r8, r18
 51c:	91 08       	sbc	r9, r1
 51e:	81 14       	cp	r8, r1
 520:	91 04       	cpc	r9, r1
 522:	71 f7       	brne	.-36     	; 0x500 <__stack+0x1>
 524:	e8 c0       	rjmp	.+464    	; 0x6f6 <__stack+0x1f7>
 526:	84 36       	cpi	r24, 0x64	; 100
 528:	11 f0       	breq	.+4      	; 0x52e <__stack+0x2f>
 52a:	89 36       	cpi	r24, 0x69	; 105
 52c:	41 f5       	brne	.+80     	; 0x57e <__stack+0x7f>
 52e:	f8 01       	movw	r30, r16
 530:	37 fe       	sbrs	r3, 7
 532:	07 c0       	rjmp	.+14     	; 0x542 <__stack+0x43>
 534:	60 81       	ld	r22, Z
 536:	71 81       	ldd	r23, Z+1	; 0x01
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	93 81       	ldd	r25, Z+3	; 0x03
 53c:	0c 5f       	subi	r16, 0xFC	; 252
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
 540:	08 c0       	rjmp	.+16     	; 0x552 <__stack+0x53>
 542:	60 81       	ld	r22, Z
 544:	71 81       	ldd	r23, Z+1	; 0x01
 546:	07 2e       	mov	r0, r23
 548:	00 0c       	add	r0, r0
 54a:	88 0b       	sbc	r24, r24
 54c:	99 0b       	sbc	r25, r25
 54e:	0e 5f       	subi	r16, 0xFE	; 254
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	f3 2d       	mov	r31, r3
 554:	ff 76       	andi	r31, 0x6F	; 111
 556:	3f 2e       	mov	r3, r31
 558:	97 ff       	sbrs	r25, 7
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__stack+0x6f>
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	f0 68       	ori	r31, 0x80	; 128
 56c:	3f 2e       	mov	r3, r31
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	a3 01       	movw	r20, r6
 574:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__ultoa_invert>
 578:	88 2e       	mov	r8, r24
 57a:	86 18       	sub	r8, r6
 57c:	45 c0       	rjmp	.+138    	; 0x608 <__stack+0x109>
 57e:	85 37       	cpi	r24, 0x75	; 117
 580:	31 f4       	brne	.+12     	; 0x58e <__stack+0x8f>
 582:	23 2d       	mov	r18, r3
 584:	2f 7e       	andi	r18, 0xEF	; 239
 586:	b2 2e       	mov	r11, r18
 588:	2a e0       	ldi	r18, 0x0A	; 10
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	25 c0       	rjmp	.+74     	; 0x5d8 <__stack+0xd9>
 58e:	93 2d       	mov	r25, r3
 590:	99 7f       	andi	r25, 0xF9	; 249
 592:	b9 2e       	mov	r11, r25
 594:	8f 36       	cpi	r24, 0x6F	; 111
 596:	c1 f0       	breq	.+48     	; 0x5c8 <__stack+0xc9>
 598:	18 f4       	brcc	.+6      	; 0x5a0 <__stack+0xa1>
 59a:	88 35       	cpi	r24, 0x58	; 88
 59c:	79 f0       	breq	.+30     	; 0x5bc <__stack+0xbd>
 59e:	b5 c0       	rjmp	.+362    	; 0x70a <__stack+0x20b>
 5a0:	80 37       	cpi	r24, 0x70	; 112
 5a2:	19 f0       	breq	.+6      	; 0x5aa <__stack+0xab>
 5a4:	88 37       	cpi	r24, 0x78	; 120
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <__stack+0xb1>
 5a8:	b0 c0       	rjmp	.+352    	; 0x70a <__stack+0x20b>
 5aa:	e9 2f       	mov	r30, r25
 5ac:	e0 61       	ori	r30, 0x10	; 16
 5ae:	be 2e       	mov	r11, r30
 5b0:	b4 fe       	sbrs	r11, 4
 5b2:	0d c0       	rjmp	.+26     	; 0x5ce <__stack+0xcf>
 5b4:	fb 2d       	mov	r31, r11
 5b6:	f4 60       	ori	r31, 0x04	; 4
 5b8:	bf 2e       	mov	r11, r31
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <__stack+0xcf>
 5bc:	34 fe       	sbrs	r3, 4
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <__stack+0xd5>
 5c0:	29 2f       	mov	r18, r25
 5c2:	26 60       	ori	r18, 0x06	; 6
 5c4:	b2 2e       	mov	r11, r18
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__stack+0xd5>
 5c8:	28 e0       	ldi	r18, 0x08	; 8
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__stack+0xd9>
 5ce:	20 e1       	ldi	r18, 0x10	; 16
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__stack+0xd9>
 5d4:	20 e1       	ldi	r18, 0x10	; 16
 5d6:	32 e0       	ldi	r19, 0x02	; 2
 5d8:	f8 01       	movw	r30, r16
 5da:	b7 fe       	sbrs	r11, 7
 5dc:	07 c0       	rjmp	.+14     	; 0x5ec <__stack+0xed>
 5de:	60 81       	ld	r22, Z
 5e0:	71 81       	ldd	r23, Z+1	; 0x01
 5e2:	82 81       	ldd	r24, Z+2	; 0x02
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	0c 5f       	subi	r16, 0xFC	; 252
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <__stack+0xf9>
 5ec:	60 81       	ld	r22, Z
 5ee:	71 81       	ldd	r23, Z+1	; 0x01
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 5f       	subi	r16, 0xFE	; 254
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	a3 01       	movw	r20, r6
 5fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__ultoa_invert>
 5fe:	88 2e       	mov	r8, r24
 600:	86 18       	sub	r8, r6
 602:	fb 2d       	mov	r31, r11
 604:	ff 77       	andi	r31, 0x7F	; 127
 606:	3f 2e       	mov	r3, r31
 608:	36 fe       	sbrs	r3, 6
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__stack+0x127>
 60c:	23 2d       	mov	r18, r3
 60e:	2e 7f       	andi	r18, 0xFE	; 254
 610:	a2 2e       	mov	r10, r18
 612:	89 14       	cp	r8, r9
 614:	58 f4       	brcc	.+22     	; 0x62c <__stack+0x12d>
 616:	34 fe       	sbrs	r3, 4
 618:	0b c0       	rjmp	.+22     	; 0x630 <__stack+0x131>
 61a:	32 fc       	sbrc	r3, 2
 61c:	09 c0       	rjmp	.+18     	; 0x630 <__stack+0x131>
 61e:	83 2d       	mov	r24, r3
 620:	8e 7e       	andi	r24, 0xEE	; 238
 622:	a8 2e       	mov	r10, r24
 624:	05 c0       	rjmp	.+10     	; 0x630 <__stack+0x131>
 626:	b8 2c       	mov	r11, r8
 628:	a3 2c       	mov	r10, r3
 62a:	03 c0       	rjmp	.+6      	; 0x632 <__stack+0x133>
 62c:	b8 2c       	mov	r11, r8
 62e:	01 c0       	rjmp	.+2      	; 0x632 <__stack+0x133>
 630:	b9 2c       	mov	r11, r9
 632:	a4 fe       	sbrs	r10, 4
 634:	0f c0       	rjmp	.+30     	; 0x654 <__stack+0x155>
 636:	fe 01       	movw	r30, r28
 638:	e8 0d       	add	r30, r8
 63a:	f1 1d       	adc	r31, r1
 63c:	80 81       	ld	r24, Z
 63e:	80 33       	cpi	r24, 0x30	; 48
 640:	21 f4       	brne	.+8      	; 0x64a <__stack+0x14b>
 642:	9a 2d       	mov	r25, r10
 644:	99 7e       	andi	r25, 0xE9	; 233
 646:	a9 2e       	mov	r10, r25
 648:	09 c0       	rjmp	.+18     	; 0x65c <__stack+0x15d>
 64a:	a2 fe       	sbrs	r10, 2
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__stack+0x15b>
 64e:	b3 94       	inc	r11
 650:	b3 94       	inc	r11
 652:	04 c0       	rjmp	.+8      	; 0x65c <__stack+0x15d>
 654:	8a 2d       	mov	r24, r10
 656:	86 78       	andi	r24, 0x86	; 134
 658:	09 f0       	breq	.+2      	; 0x65c <__stack+0x15d>
 65a:	b3 94       	inc	r11
 65c:	a3 fc       	sbrc	r10, 3
 65e:	11 c0       	rjmp	.+34     	; 0x682 <__stack+0x183>
 660:	a0 fe       	sbrs	r10, 0
 662:	06 c0       	rjmp	.+12     	; 0x670 <__stack+0x171>
 664:	b2 14       	cp	r11, r2
 666:	88 f4       	brcc	.+34     	; 0x68a <__stack+0x18b>
 668:	28 0c       	add	r2, r8
 66a:	92 2c       	mov	r9, r2
 66c:	9b 18       	sub	r9, r11
 66e:	0e c0       	rjmp	.+28     	; 0x68c <__stack+0x18d>
 670:	b2 14       	cp	r11, r2
 672:	60 f4       	brcc	.+24     	; 0x68c <__stack+0x18d>
 674:	b6 01       	movw	r22, r12
 676:	80 e2       	ldi	r24, 0x20	; 32
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 67e:	b3 94       	inc	r11
 680:	f7 cf       	rjmp	.-18     	; 0x670 <__stack+0x171>
 682:	b2 14       	cp	r11, r2
 684:	18 f4       	brcc	.+6      	; 0x68c <__stack+0x18d>
 686:	2b 18       	sub	r2, r11
 688:	02 c0       	rjmp	.+4      	; 0x68e <__stack+0x18f>
 68a:	98 2c       	mov	r9, r8
 68c:	21 2c       	mov	r2, r1
 68e:	a4 fe       	sbrs	r10, 4
 690:	10 c0       	rjmp	.+32     	; 0x6b2 <__stack+0x1b3>
 692:	b6 01       	movw	r22, r12
 694:	80 e3       	ldi	r24, 0x30	; 48
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 69c:	a2 fe       	sbrs	r10, 2
 69e:	17 c0       	rjmp	.+46     	; 0x6ce <__stack+0x1cf>
 6a0:	a1 fc       	sbrc	r10, 1
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <__stack+0x1ab>
 6a4:	88 e7       	ldi	r24, 0x78	; 120
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__stack+0x1af>
 6aa:	88 e5       	ldi	r24, 0x58	; 88
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	b6 01       	movw	r22, r12
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <__stack+0x1cb>
 6b2:	8a 2d       	mov	r24, r10
 6b4:	86 78       	andi	r24, 0x86	; 134
 6b6:	59 f0       	breq	.+22     	; 0x6ce <__stack+0x1cf>
 6b8:	a1 fe       	sbrs	r10, 1
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__stack+0x1c1>
 6bc:	8b e2       	ldi	r24, 0x2B	; 43
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <__stack+0x1c3>
 6c0:	80 e2       	ldi	r24, 0x20	; 32
 6c2:	a7 fc       	sbrc	r10, 7
 6c4:	8d e2       	ldi	r24, 0x2D	; 45
 6c6:	b6 01       	movw	r22, r12
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 6ce:	89 14       	cp	r8, r9
 6d0:	38 f4       	brcc	.+14     	; 0x6e0 <__stack+0x1e1>
 6d2:	b6 01       	movw	r22, r12
 6d4:	80 e3       	ldi	r24, 0x30	; 48
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 6dc:	9a 94       	dec	r9
 6de:	f7 cf       	rjmp	.-18     	; 0x6ce <__stack+0x1cf>
 6e0:	8a 94       	dec	r8
 6e2:	f3 01       	movw	r30, r6
 6e4:	e8 0d       	add	r30, r8
 6e6:	f1 1d       	adc	r31, r1
 6e8:	80 81       	ld	r24, Z
 6ea:	b6 01       	movw	r22, r12
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 6f2:	81 10       	cpse	r8, r1
 6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <__stack+0x1e1>
 6f6:	22 20       	and	r2, r2
 6f8:	09 f4       	brne	.+2      	; 0x6fc <__stack+0x1fd>
 6fa:	42 ce       	rjmp	.-892    	; 0x380 <vfprintf+0x24>
 6fc:	b6 01       	movw	r22, r12
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 a5 03 	call	0x74a	; 0x74a <fputc>
 706:	2a 94       	dec	r2
 708:	f6 cf       	rjmp	.-20     	; 0x6f6 <__stack+0x1f7>
 70a:	f6 01       	movw	r30, r12
 70c:	86 81       	ldd	r24, Z+6	; 0x06
 70e:	97 81       	ldd	r25, Z+7	; 0x07
 710:	02 c0       	rjmp	.+4      	; 0x716 <__stack+0x217>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	9f ef       	ldi	r25, 0xFF	; 255
 716:	2b 96       	adiw	r28, 0x0b	; 11
 718:	e2 e1       	ldi	r30, 0x12	; 18
 71a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__epilogue_restores__>

0000071e <strnlen_P>:
 71e:	fc 01       	movw	r30, r24
 720:	05 90       	lpm	r0, Z+
 722:	61 50       	subi	r22, 0x01	; 1
 724:	70 40       	sbci	r23, 0x00	; 0
 726:	01 10       	cpse	r0, r1
 728:	d8 f7       	brcc	.-10     	; 0x720 <strnlen_P+0x2>
 72a:	80 95       	com	r24
 72c:	90 95       	com	r25
 72e:	8e 0f       	add	r24, r30
 730:	9f 1f       	adc	r25, r31
 732:	08 95       	ret

00000734 <strnlen>:
 734:	fc 01       	movw	r30, r24
 736:	61 50       	subi	r22, 0x01	; 1
 738:	70 40       	sbci	r23, 0x00	; 0
 73a:	01 90       	ld	r0, Z+
 73c:	01 10       	cpse	r0, r1
 73e:	d8 f7       	brcc	.-10     	; 0x736 <strnlen+0x2>
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	8e 0f       	add	r24, r30
 746:	9f 1f       	adc	r25, r31
 748:	08 95       	ret

0000074a <fputc>:
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	fb 01       	movw	r30, r22
 754:	23 81       	ldd	r18, Z+3	; 0x03
 756:	21 fd       	sbrc	r18, 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <fputc+0x16>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	9f ef       	ldi	r25, 0xFF	; 255
 75e:	2c c0       	rjmp	.+88     	; 0x7b8 <fputc+0x6e>
 760:	22 ff       	sbrs	r18, 2
 762:	16 c0       	rjmp	.+44     	; 0x790 <fputc+0x46>
 764:	46 81       	ldd	r20, Z+6	; 0x06
 766:	57 81       	ldd	r21, Z+7	; 0x07
 768:	24 81       	ldd	r18, Z+4	; 0x04
 76a:	35 81       	ldd	r19, Z+5	; 0x05
 76c:	42 17       	cp	r20, r18
 76e:	53 07       	cpc	r21, r19
 770:	44 f4       	brge	.+16     	; 0x782 <fputc+0x38>
 772:	a0 81       	ld	r26, Z
 774:	b1 81       	ldd	r27, Z+1	; 0x01
 776:	9d 01       	movw	r18, r26
 778:	2f 5f       	subi	r18, 0xFF	; 255
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	31 83       	std	Z+1, r19	; 0x01
 77e:	20 83       	st	Z, r18
 780:	8c 93       	st	X, r24
 782:	26 81       	ldd	r18, Z+6	; 0x06
 784:	37 81       	ldd	r19, Z+7	; 0x07
 786:	2f 5f       	subi	r18, 0xFF	; 255
 788:	3f 4f       	sbci	r19, 0xFF	; 255
 78a:	37 83       	std	Z+7, r19	; 0x07
 78c:	26 83       	std	Z+6, r18	; 0x06
 78e:	14 c0       	rjmp	.+40     	; 0x7b8 <fputc+0x6e>
 790:	8b 01       	movw	r16, r22
 792:	ec 01       	movw	r28, r24
 794:	fb 01       	movw	r30, r22
 796:	00 84       	ldd	r0, Z+8	; 0x08
 798:	f1 85       	ldd	r31, Z+9	; 0x09
 79a:	e0 2d       	mov	r30, r0
 79c:	09 95       	icall
 79e:	89 2b       	or	r24, r25
 7a0:	e1 f6       	brne	.-72     	; 0x75a <fputc+0x10>
 7a2:	d8 01       	movw	r26, r16
 7a4:	16 96       	adiw	r26, 0x06	; 6
 7a6:	8d 91       	ld	r24, X+
 7a8:	9c 91       	ld	r25, X
 7aa:	17 97       	sbiw	r26, 0x07	; 7
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	17 96       	adiw	r26, 0x07	; 7
 7b0:	9c 93       	st	X, r25
 7b2:	8e 93       	st	-X, r24
 7b4:	16 97       	sbiw	r26, 0x06	; 6
 7b6:	ce 01       	movw	r24, r28
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	08 95       	ret

000007c2 <__ultoa_invert>:
 7c2:	fa 01       	movw	r30, r20
 7c4:	aa 27       	eor	r26, r26
 7c6:	28 30       	cpi	r18, 0x08	; 8
 7c8:	51 f1       	breq	.+84     	; 0x81e <__ultoa_invert+0x5c>
 7ca:	20 31       	cpi	r18, 0x10	; 16
 7cc:	81 f1       	breq	.+96     	; 0x82e <__ultoa_invert+0x6c>
 7ce:	e8 94       	clt
 7d0:	6f 93       	push	r22
 7d2:	6e 7f       	andi	r22, 0xFE	; 254
 7d4:	6e 5f       	subi	r22, 0xFE	; 254
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	af 4f       	sbci	r26, 0xFF	; 255
 7de:	b1 e0       	ldi	r27, 0x01	; 1
 7e0:	3e d0       	rcall	.+124    	; 0x85e <__ultoa_invert+0x9c>
 7e2:	b4 e0       	ldi	r27, 0x04	; 4
 7e4:	3c d0       	rcall	.+120    	; 0x85e <__ultoa_invert+0x9c>
 7e6:	67 0f       	add	r22, r23
 7e8:	78 1f       	adc	r23, r24
 7ea:	89 1f       	adc	r24, r25
 7ec:	9a 1f       	adc	r25, r26
 7ee:	a1 1d       	adc	r26, r1
 7f0:	68 0f       	add	r22, r24
 7f2:	79 1f       	adc	r23, r25
 7f4:	8a 1f       	adc	r24, r26
 7f6:	91 1d       	adc	r25, r1
 7f8:	a1 1d       	adc	r26, r1
 7fa:	6a 0f       	add	r22, r26
 7fc:	71 1d       	adc	r23, r1
 7fe:	81 1d       	adc	r24, r1
 800:	91 1d       	adc	r25, r1
 802:	a1 1d       	adc	r26, r1
 804:	20 d0       	rcall	.+64     	; 0x846 <__ultoa_invert+0x84>
 806:	09 f4       	brne	.+2      	; 0x80a <__ultoa_invert+0x48>
 808:	68 94       	set
 80a:	3f 91       	pop	r19
 80c:	2a e0       	ldi	r18, 0x0A	; 10
 80e:	26 9f       	mul	r18, r22
 810:	11 24       	eor	r1, r1
 812:	30 19       	sub	r19, r0
 814:	30 5d       	subi	r19, 0xD0	; 208
 816:	31 93       	st	Z+, r19
 818:	de f6       	brtc	.-74     	; 0x7d0 <__ultoa_invert+0xe>
 81a:	cf 01       	movw	r24, r30
 81c:	08 95       	ret
 81e:	46 2f       	mov	r20, r22
 820:	47 70       	andi	r20, 0x07	; 7
 822:	40 5d       	subi	r20, 0xD0	; 208
 824:	41 93       	st	Z+, r20
 826:	b3 e0       	ldi	r27, 0x03	; 3
 828:	0f d0       	rcall	.+30     	; 0x848 <__ultoa_invert+0x86>
 82a:	c9 f7       	brne	.-14     	; 0x81e <__ultoa_invert+0x5c>
 82c:	f6 cf       	rjmp	.-20     	; 0x81a <__ultoa_invert+0x58>
 82e:	46 2f       	mov	r20, r22
 830:	4f 70       	andi	r20, 0x0F	; 15
 832:	40 5d       	subi	r20, 0xD0	; 208
 834:	4a 33       	cpi	r20, 0x3A	; 58
 836:	18 f0       	brcs	.+6      	; 0x83e <__ultoa_invert+0x7c>
 838:	49 5d       	subi	r20, 0xD9	; 217
 83a:	31 fd       	sbrc	r19, 1
 83c:	40 52       	subi	r20, 0x20	; 32
 83e:	41 93       	st	Z+, r20
 840:	02 d0       	rcall	.+4      	; 0x846 <__ultoa_invert+0x84>
 842:	a9 f7       	brne	.-22     	; 0x82e <__ultoa_invert+0x6c>
 844:	ea cf       	rjmp	.-44     	; 0x81a <__ultoa_invert+0x58>
 846:	b4 e0       	ldi	r27, 0x04	; 4
 848:	a6 95       	lsr	r26
 84a:	97 95       	ror	r25
 84c:	87 95       	ror	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	ba 95       	dec	r27
 854:	c9 f7       	brne	.-14     	; 0x848 <__ultoa_invert+0x86>
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	61 05       	cpc	r22, r1
 85a:	71 05       	cpc	r23, r1
 85c:	08 95       	ret
 85e:	9b 01       	movw	r18, r22
 860:	ac 01       	movw	r20, r24
 862:	0a 2e       	mov	r0, r26
 864:	06 94       	lsr	r0
 866:	57 95       	ror	r21
 868:	47 95       	ror	r20
 86a:	37 95       	ror	r19
 86c:	27 95       	ror	r18
 86e:	ba 95       	dec	r27
 870:	c9 f7       	brne	.-14     	; 0x864 <__ultoa_invert+0xa2>
 872:	62 0f       	add	r22, r18
 874:	73 1f       	adc	r23, r19
 876:	84 1f       	adc	r24, r20
 878:	95 1f       	adc	r25, r21
 87a:	a0 1d       	adc	r26, r0
 87c:	08 95       	ret

0000087e <__prologue_saves__>:
 87e:	2f 92       	push	r2
 880:	3f 92       	push	r3
 882:	4f 92       	push	r4
 884:	5f 92       	push	r5
 886:	6f 92       	push	r6
 888:	7f 92       	push	r7
 88a:	8f 92       	push	r8
 88c:	9f 92       	push	r9
 88e:	af 92       	push	r10
 890:	bf 92       	push	r11
 892:	cf 92       	push	r12
 894:	df 92       	push	r13
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	ca 1b       	sub	r28, r26
 8a8:	db 0b       	sbc	r29, r27
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	de bf       	out	0x3e, r29	; 62
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	cd bf       	out	0x3d, r28	; 61
 8b4:	09 94       	ijmp

000008b6 <__epilogue_restores__>:
 8b6:	2a 88       	ldd	r2, Y+18	; 0x12
 8b8:	39 88       	ldd	r3, Y+17	; 0x11
 8ba:	48 88       	ldd	r4, Y+16	; 0x10
 8bc:	5f 84       	ldd	r5, Y+15	; 0x0f
 8be:	6e 84       	ldd	r6, Y+14	; 0x0e
 8c0:	7d 84       	ldd	r7, Y+13	; 0x0d
 8c2:	8c 84       	ldd	r8, Y+12	; 0x0c
 8c4:	9b 84       	ldd	r9, Y+11	; 0x0b
 8c6:	aa 84       	ldd	r10, Y+10	; 0x0a
 8c8:	b9 84       	ldd	r11, Y+9	; 0x09
 8ca:	c8 84       	ldd	r12, Y+8	; 0x08
 8cc:	df 80       	ldd	r13, Y+7	; 0x07
 8ce:	ee 80       	ldd	r14, Y+6	; 0x06
 8d0:	fd 80       	ldd	r15, Y+5	; 0x05
 8d2:	0c 81       	ldd	r16, Y+4	; 0x04
 8d4:	1b 81       	ldd	r17, Y+3	; 0x03
 8d6:	aa 81       	ldd	r26, Y+2	; 0x02
 8d8:	b9 81       	ldd	r27, Y+1	; 0x01
 8da:	ce 0f       	add	r28, r30
 8dc:	d1 1d       	adc	r29, r1
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	ed 01       	movw	r28, r26
 8ea:	08 95       	ret

000008ec <_exit>:
 8ec:	f8 94       	cli

000008ee <__stop_program>:
 8ee:	ff cf       	rjmp	.-2      	; 0x8ee <__stop_program>
