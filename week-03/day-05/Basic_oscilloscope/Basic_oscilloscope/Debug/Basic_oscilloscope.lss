
Basic_oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010c  0080010c  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c04  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  00001a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ee ec       	ldi	r30, 0xCE	; 206
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a3 33       	cpi	r26, 0x33	; 51
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  a2:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <ADC_Init>:
#include <stdint.h>

void ADC_Init() {
	// TODO:
	// Set the reference voltage to AVcc.
	ADMUX |= 1 << REFS0;
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	// TODO:
	// Set the data format right adjusted, so the bottom 8bits will be in ADCL register
	
	// TODO:
	// Set the used channel. Use the definitions from ADC_driver.h!
	 ADMUX |= ADC_CH;
  b4:	80 81       	ld	r24, Z
  b6:	80 83       	st	Z, r24
	// TODO:
	// Set the prescaler. Use the definitions from ADC_driver.h!
	ADCSRA |= ADC_ADPS;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24

	// TODO:
	// Enable the ADC peripheral
	ADCSRA |= 1 << ADEN;
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <ADC_Read>:
}

uint16_t ADC_Read() {
	// TODO:
	// Start a conversion with ADSC bit setup
	ADCSRA |= 1 << ADSC;
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24

	// TODO:
	// Wait for the conversion to finish by checking ADSC bit
	while(ADCSRA & (1<<ADSC));
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <ADC_Read+0xa>

	// TODO:
	// return with the read data, use the "ADC" register!
	return (ADC);
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e2:	08 95       	ret

000000e4 <SystemInit>:
#define LED_PORT		PORTB
#define LED_PORT_POS	PORTB5

void SystemInit() {
	// Initialize the LED pin as output
	LED_DDR |= 1 << LED_DDR_POS;
  e4:	25 9a       	sbi	0x04, 5	; 4
	// Set the LED to off as default
	LED_PORT &= ~(1 << LED_PORT_POS);
  e6:	2d 98       	cbi	0x05, 5	; 5

	// Call the DAC driver init function
	ADC_Init();
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Init>

	// Call the UART driver init function
	// Keep in mind that the UART will run at 115200 baud/sec
	UART_Init();
  ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_Init>

	// Enable interrupts globally, UART uses interrupts
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <main>:
}

int main(void) {
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	6c 97       	sbiw	r28, 0x1c	; 28
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_data;

	// Don't forget to call the init function :)
	SystemInit();
 108:	0e 94 72 00 	call	0xe4	; 0xe4 <SystemInit>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 10c:	8e e0       	ldi	r24, 0x0E	; 14
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	fd 01       	movw	r30, r26
 114:	98 2f       	mov	r25, r24
 116:	11 92       	st	Z+, r1
 118:	9a 95       	dec	r25
 11a:	e9 f7       	brne	.-6      	; 0x116 <main+0x22>
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	9c 83       	std	Y+4, r25	; 0x04
 120:	2a e0       	ldi	r18, 0x0A	; 10
 122:	31 e0       	ldi	r19, 0x01	; 1
 124:	3a 87       	std	Y+10, r19	; 0x0a
 126:	29 87       	std	Y+9, r18	; 0x09
	stdout = &UART_output;
 128:	2d e2       	ldi	r18, 0x2D	; 45
 12a:	31 e0       	ldi	r19, 0x01	; 1
 12c:	f9 01       	movw	r30, r18
 12e:	b3 83       	std	Z+3, r27	; 0x03
 130:	a2 83       	std	Z+2, r26	; 0x02
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 132:	1e 96       	adiw	r26, 0x0e	; 14
 134:	fd 01       	movw	r30, r26
 136:	11 92       	st	Z+, r1
 138:	8a 95       	dec	r24
 13a:	e9 f7       	brne	.-6      	; 0x136 <main+0x42>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8a 8b       	std	Y+18, r24	; 0x12
 140:	82 e1       	ldi	r24, 0x12	; 18
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9a 8f       	std	Y+26, r25	; 0x1a
 146:	89 8f       	std	Y+25, r24	; 0x19
	stdin = &UART_input;
 148:	f9 01       	movw	r30, r18
 14a:	b1 83       	std	Z+1, r27	; 0x01
 14c:	a0 83       	st	Z, r26
	//----- END OF STDIO IO BUFFER SETUP

	// Try printf
	printf("Startup...\r\n");
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 35 01 	call	0x26a	; 0x26a <puts>

	// Infinite loop
	while (1) {
		// ADC tester code
		adc_data = ADC_Read();
 156:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
		//printf("%d\r\n", adc_data);

			UART_SendCharacter( (uint8_t) adc_data/4);
 15a:	99 27       	eor	r25, r25
 15c:	95 95       	asr	r25
 15e:	87 95       	ror	r24
 160:	95 95       	asr	r25
 162:	87 95       	ror	r24
 164:	0e 94 0a 01 	call	0x214	; 0x214 <UART_SendCharacter>
 168:	f6 cf       	rjmp	.-20     	; 0x156 <main+0x62>

0000016a <__vector_18>:
#include "UART_driver.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

ISR(USART_RX_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	// Put received character into the circular buffer
	*(rx_buffer.write_ptr) = UDR0;
 184:	ec e0       	ldi	r30, 0x0C	; 12
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	a5 8d       	ldd	r26, Z+29	; 0x1d
 18a:	b6 8d       	ldd	r27, Z+30	; 0x1e
 18c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 190:	8c 93       	st	X, r24

	// Increment the write ptr
	// Be aware that the write ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_buffer.write_ptr == rx_buffer.tail) {
 192:	25 8d       	ldd	r18, Z+29	; 0x1d
 194:	36 8d       	ldd	r19, Z+30	; 0x1e
 196:	83 8d       	ldd	r24, Z+27	; 0x1b
 198:	94 8d       	ldd	r25, Z+28	; 0x1c
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	29 f4       	brne	.+10     	; 0x1aa <__vector_18+0x40>
		rx_buffer.write_ptr = rx_buffer.head;
 1a0:	81 8d       	ldd	r24, Z+25	; 0x19
 1a2:	92 8d       	ldd	r25, Z+26	; 0x1a
 1a4:	96 8f       	std	Z+30, r25	; 0x1e
 1a6:	85 8f       	std	Z+29, r24	; 0x1d
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__vector_18+0x4e>
		} else {
		rx_buffer.write_ptr++;
 1aa:	ec e0       	ldi	r30, 0x0C	; 12
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	85 8d       	ldd	r24, Z+29	; 0x1d
 1b0:	96 8d       	ldd	r25, Z+30	; 0x1e
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	96 8f       	std	Z+30, r25	; 0x1e
 1b6:	85 8f       	std	Z+29, r24	; 0x1d
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <UART_Init>:

	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	
	uint16_t ubbr = 8;
	UBRR0H = ubbr >> 8;
 1d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubbr;
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Set the following frame format: 8N1
	// It's set by default to 8N1

	// Enable TX
	UCSR0B |= 1 << TXEN0;
 1dc:	e1 ec       	ldi	r30, 0xC1	; 193
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	80 83       	st	Z, r24

	// Enable RX
	UCSR0B |= 1 << RXEN0;
 1e6:	80 81       	ld	r24, Z
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	80 83       	st	Z, r24

	// Enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
 1ec:	80 81       	ld	r24, Z
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	80 83       	st	Z, r24

	// Initialize circular buffer pointers, they should point to the head of the buffer
	rx_buffer.head = &(rx_buffer.buffer[0]);
 1f2:	ec e0       	ldi	r30, 0x0C	; 12
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	f2 8f       	std	Z+26, r31	; 0x1a
 1f8:	e1 8f       	std	Z+25, r30	; 0x19
	rx_buffer.tail = &(rx_buffer.buffer[RX_CIRC_BUFF_LEN-1]);
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	94 8f       	std	Z+28, r25	; 0x1c
 200:	83 8f       	std	Z+27, r24	; 0x1b
	rx_buffer.read_ptr = rx_buffer.head;
 202:	81 8d       	ldd	r24, Z+25	; 0x19
 204:	92 8d       	ldd	r25, Z+26	; 0x1a
 206:	90 a3       	std	Z+32, r25	; 0x20
 208:	87 8f       	std	Z+31, r24	; 0x1f
	rx_buffer.write_ptr = rx_buffer.head;
 20a:	81 8d       	ldd	r24, Z+25	; 0x19
 20c:	92 8d       	ldd	r25, Z+26	; 0x1a
 20e:	96 8f       	std	Z+30, r25	; 0x1e
 210:	85 8f       	std	Z+29, r24	; 0x1d
 212:	08 95       	ret

00000214 <UART_SendCharacter>:
void UART_SendCharacter(char character) {
	// This function can send a character through UART with polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	// Wait for empty USART buffer register
	while ( !( UCSR0A & (1<<UDRE0)) );
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	90 81       	ld	r25, Z
 21a:	95 ff       	sbrs	r25, 5
 21c:	fd cf       	rjmp	.-6      	; 0x218 <UART_SendCharacter+0x4>

	// Put data to USART buffer register
	UDR0 = character;
 21e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 222:	08 95       	ret

00000224 <UART_GetCharacter>:
}

char UART_GetCharacter() {
	// Wait for data in the circular buffer, this can be detected if the write and read pointers are pointing to the same memory block
	while(rx_buffer.read_ptr == rx_buffer.write_ptr);
 224:	ec e0       	ldi	r30, 0x0C	; 12
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	27 8d       	ldd	r18, Z+31	; 0x1f
 22a:	30 a1       	ldd	r19, Z+32	; 0x20
 22c:	85 8d       	ldd	r24, Z+29	; 0x1d
 22e:	96 8d       	ldd	r25, Z+30	; 0x1e
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	c9 f3       	breq	.-14     	; 0x228 <UART_GetCharacter+0x4>

	// Save the data to a temporary variable
	char to_return = *rx_buffer.read_ptr;
 236:	ec e0       	ldi	r30, 0x0C	; 12
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	a7 8d       	ldd	r26, Z+31	; 0x1f
 23c:	b0 a1       	ldd	r27, Z+32	; 0x20
 23e:	8c 91       	ld	r24, X

	// Increment the read ptr
	// Be aware that the read ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_buffer.read_ptr == rx_buffer.tail) {
 240:	47 8d       	ldd	r20, Z+31	; 0x1f
 242:	50 a1       	ldd	r21, Z+32	; 0x20
 244:	23 8d       	ldd	r18, Z+27	; 0x1b
 246:	34 8d       	ldd	r19, Z+28	; 0x1c
 248:	42 17       	cp	r20, r18
 24a:	53 07       	cpc	r21, r19
 24c:	29 f4       	brne	.+10     	; 0x258 <UART_GetCharacter+0x34>
		rx_buffer.read_ptr = rx_buffer.head;
 24e:	21 8d       	ldd	r18, Z+25	; 0x19
 250:	32 8d       	ldd	r19, Z+26	; 0x1a
 252:	30 a3       	std	Z+32, r19	; 0x20
 254:	27 8f       	std	Z+31, r18	; 0x1f
 256:	08 95       	ret
		} else {
		rx_buffer.read_ptr++;
 258:	ec e0       	ldi	r30, 0x0C	; 12
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	27 8d       	ldd	r18, Z+31	; 0x1f
 25e:	30 a1       	ldd	r19, Z+32	; 0x20
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	30 a3       	std	Z+32, r19	; 0x20
 266:	27 8f       	std	Z+31, r18	; 0x1f
	}

	// Return the read character
	return to_return;
}
 268:	08 95       	ret

0000026a <puts>:
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__iob+0x2>
 276:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__iob+0x3>
 27a:	23 81       	ldd	r18, Z+3	; 0x03
 27c:	21 ff       	sbrs	r18, 1
 27e:	1b c0       	rjmp	.+54     	; 0x2b6 <puts+0x4c>
 280:	8c 01       	movw	r16, r24
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	f8 01       	movw	r30, r16
 288:	81 91       	ld	r24, Z+
 28a:	8f 01       	movw	r16, r30
 28c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <__iob+0x2>
 290:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <__iob+0x3>
 294:	db 01       	movw	r26, r22
 296:	18 96       	adiw	r26, 0x08	; 8
 298:	ed 91       	ld	r30, X+
 29a:	fc 91       	ld	r31, X
 29c:	19 97       	sbiw	r26, 0x09	; 9
 29e:	88 23       	and	r24, r24
 2a0:	31 f0       	breq	.+12     	; 0x2ae <puts+0x44>
 2a2:	09 95       	icall
 2a4:	89 2b       	or	r24, r25
 2a6:	79 f3       	breq	.-34     	; 0x286 <puts+0x1c>
 2a8:	df ef       	ldi	r29, 0xFF	; 255
 2aa:	cf ef       	ldi	r28, 0xFF	; 255
 2ac:	ec cf       	rjmp	.-40     	; 0x286 <puts+0x1c>
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	09 95       	icall
 2b2:	89 2b       	or	r24, r25
 2b4:	19 f0       	breq	.+6      	; 0x2bc <puts+0x52>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <puts+0x56>
 2bc:	8d 2f       	mov	r24, r29
 2be:	9c 2f       	mov	r25, r28
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
