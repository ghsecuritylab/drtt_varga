
Writing_driver_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6a  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cc  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e1  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001fbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
}

int main(void) {
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
#endif
#include <avr/delay.h>

void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
  8e:	0e 94 5b 00 	call	0xb6	; 0xb6 <MCP4821_Init>
	MCP4821_Data_t DAC_data;
	DAC_data.start_zero = 0;
	DAC_data.dont_care = 0;
	DAC_data.gain = 0;
	DAC_data.shutdown = 1;
	DAC_data.data = 0xAAA;
  92:	8a ea       	ldi	r24, 0xAA	; 170
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	8a e1       	ldi	r24, 0x1A	; 26
  98:	8a 83       	std	Y+2, r24	; 0x02

	// Send the data structure
	MCP4821_SendData(&DAC_data);
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 88 00 	call	0x110	; 0x110 <MCP4821_SendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	9c e0       	ldi	r25, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x24>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x2e>
  b2:	00 00       	nop
  b4:	f6 cf       	rjmp	.-20     	; 0xa2 <main+0x1e>

000000b6 <MCP4821_Init>:
#include "MCP4821_driver.h"

void MCP4821_Init() {
    // TODO:
    // Initialize the SPI related pins. Use the definitions from MCP4821_driver.h!
	SPI_MOSI_DDR |= 1 << SPI_MOSI_DDR_POS;
  b6:	23 9a       	sbi	0x04, 3	; 4
	SPI_MOSI_PORT |= 1 << SPI_MOSI_PORT_POS;
  b8:	2b 9a       	sbi	0x05, 3	; 5
	
	SPI_SCK_PORT |= 1<< SPI_SCK_PORT_POS;
  ba:	2d 9a       	sbi	0x05, 5	; 5
	SPI_SCK_DDR	|= 1 << SPI_SCK_DDR_POS;
  bc:	25 9a       	sbi	0x04, 5	; 4
	
	
	SPI_SS_DDR |= 1<< SPI_SS_DDR_POS;
  be:	22 9a       	sbi	0x04, 2	; 4

    // TODO:
    // Pull SS pin to high!
	SPI_SS_PORT |= 1<< SPI_SS_PORT_POS;
  c0:	2a 9a       	sbi	0x05, 2	; 5
	

    // TODO:
    // Set the SPI mode (CPOL and CPHA). Use the definitions from MCP4821_driver.h!
	SPCR &= ~(1<< CPOL);
  c2:	8c b5       	in	r24, 0x2c	; 44
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<< CPHA);
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	8c bd       	out	0x2c, r24	; 44

    // TODO:
    // Set master mode
	SPCR |= 1 << MSTR;
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	8c bd       	out	0x2c, r24	; 44

    // TODO:
    // Set the clock frequency. Use the definitions from MCP4821_driver.h!
	SPCR |= (1 << SPR0) | (1 << SPR1);
  d4:	8c b5       	in	r24, 0x2c	; 44
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	8c bd       	out	0x2c, r24	; 44
	

    // TODO:
    // Enable SPI peripheral
	SPCR |= 1 << SPE;
  da:	8c b5       	in	r24, 0x2c	; 44
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8c bd       	out	0x2c, r24	; 44
  e0:	08 95       	ret

000000e2 <MCP4821_SendRawData>:
}

void MCP4821_SendRawData(uint16_t data) {
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
    // TODO:
    // Pull SS low
	SPI_SS_PORT &= ~(1<< SPI_SS_PORT_POS);
  ec:	2a 98       	cbi	0x05, 2	; 5
    // TODO:
    // Put the top 8bits of the data to the SPI shift register
	SPDR = data >> 8;
  ee:	9e bd       	out	0x2e, r25	; 46
    // TODO:
    // Wait for the end of the transmission
	while(!(SPSR & (1<<SPIF)));
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <MCP4821_SendRawData+0xe>

    // You have to read the SPDR register to clear the SPIF flag after the end of transmission
    volatile uint8_t dummy_variable = SPDR;
  f6:	9e b5       	in	r25, 0x2e	; 46
  f8:	99 83       	std	Y+1, r25	; 0x01

    // TODO:
    // Put the bottom 8bits of the data to the SPI shift register
	SPDR = data;
  fa:	8e bd       	out	0x2e, r24	; 46
    // TODO:
    // Wait for the end of the transmission
	while(!(SPSR & (1<<SPIF)));
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <MCP4821_SendRawData+0x1a>

    // You have to read the SPDR register to clear the SPIF flag after the end of transmission
    dummy_variable = SPDR;
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	89 83       	std	Y+1, r24	; 0x01

    // TODO:
    // Pull SS high
	SPI_SS_PORT |= 1<< SPI_SS_PORT_POS;
 106:	2a 9a       	sbi	0x05, 2	; 5
}
 108:	0f 90       	pop	r0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <MCP4821_SendData>:
void MCP4821_SendData(MCP4821_Data_t* data) {
    // Convert the data variable to a 16bit number with memcpy()
    // Then use the MCP4821_SendRawData() function to send the data
    uint16_t buffer;
    memcpy(&buffer, data, sizeof(MCP4821_Data_t));
    MCP4821_SendRawData(buffer);
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	0e 94 71 00 	call	0xe2	; 0xe2 <MCP4821_SendRawData>
 11a:	08 95       	ret

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
