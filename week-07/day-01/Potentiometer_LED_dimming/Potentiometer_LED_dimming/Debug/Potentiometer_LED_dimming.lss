
Potentiometer_LED_dimming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095f  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:

int main(void) {
	
	int brightness = 0;
	
	TC0_init ();
  84:	0e 94 5b 00 	call	0xb6	; 0xb6 <TC0_init>
	PWM_output ();
  88:	0e 94 63 00 	call	0xc6	; 0xc6 <PWM_output>
	
 while (1) 
{
	for (brightness = 50; brightness < 100; brightness++) {
  8c:	c2 e3       	ldi	r28, 0x32	; 50
  8e:	d0 e0       	ldi	r29, 0x00	; 0
			PWM_output (brightness);
  90:	ce 01       	movw	r24, r28
  92:	0e 94 63 00 	call	0xc6	; 0xc6 <PWM_output>
			Wait ();
  96:	0e 94 65 00 	call	0xca	; 0xca <Wait>
	TC0_init ();
	PWM_output ();
	
 while (1) 
{
	for (brightness = 50; brightness < 100; brightness++) {
  9a:	21 96       	adiw	r28, 0x01	; 1
  9c:	c4 36       	cpi	r28, 0x64	; 100
  9e:	d1 05       	cpc	r29, r1
  a0:	b9 f7       	brne	.-18     	; 0x90 <main+0xc>
			PWM_output (brightness);
			Wait ();
	}
	for (brightness = 100; brightness > 50; brightness--) {
			PWM_output (brightness);
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 63 00 	call	0xc6	; 0xc6 <PWM_output>
			Wait ();
  a8:	0e 94 65 00 	call	0xca	; 0xca <Wait>
{
	for (brightness = 50; brightness < 100; brightness++) {
			PWM_output (brightness);
			Wait ();
	}
	for (brightness = 100; brightness > 50; brightness--) {
  ac:	21 97       	sbiw	r28, 0x01	; 1
  ae:	c2 33       	cpi	r28, 0x32	; 50
  b0:	d1 05       	cpc	r29, r1
  b2:	b9 f7       	brne	.-18     	; 0xa2 <main+0x1e>
  b4:	eb cf       	rjmp	.-42     	; 0x8c <main+0x8>

000000b6 <TC0_init>:

/*function which initializes the TC0 timer in Fast PWM mode*/

void TC0_init ()
{
	TCCR0A |= 1 << WGM00 | 1 << WGM01 | 1 << COM0A1;
  b6:	84 b5       	in	r24, 0x24	; 36
  b8:	83 68       	ori	r24, 0x83	; 131
  ba:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS02 | 1 << CS00;
  bc:	85 b5       	in	r24, 0x25	; 37
  be:	85 60       	ori	r24, 0x05	; 5
  c0:	85 bd       	out	0x25, r24	; 37
	DDRD |= 1 << DDRD6;	
  c2:	56 9a       	sbi	0x0a, 6	; 10
  c4:	08 95       	ret

000000c6 <PWM_output>:
}

void PWM_output (uint8_t duty)
{
	OCR0A = duty;
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	08 95       	ret

000000ca <Wait>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ca:	84 e6       	ldi	r24, 0x64	; 100
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <Wait+0x2>
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
